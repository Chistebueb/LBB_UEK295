const express = require('express')
const bodyParser = require('body-parser')
const session = require('express-session');
const cookieParser = require('cookie-parser');

const app = express()
const port = 3000

app.use(bodyParser.json())
app.use(cookieParser());
app.use(session({
    secret: 'Ahhhhhhh',
    resave: false,
    saveUninitialized: true,
    cookie: { secure: false }
}));

const USER = process.env.USER || 'zli';
const PASSWORD = process.env.PASSWORD || 'zli1234';

//--- generated by ChatGPT
let tasks = [
    {
        id: 1,
        title: "Complete the project",
        description: "Finish all remaining tasks for the project by the end of the month.",
        done: false,
        dueDate: "2024-06-30",
        createdAt: new Date().toISOString()
    },
    {
        id: 2,
        title: "Prepare meeting notes",
        description: "Gather all necessary documents and prepare notes for the upcoming client meeting.",
        done: false,
        dueDate: "2024-06-15",
        createdAt: new Date().toISOString()
    },
    {
        id: 3,
        title: "Update software",
        description: "Update all office computers with the latest security patches and software updates.",
        done: true,
        dueDate: "2024-06-10",
        createdAt: new Date().toISOString()
    }
];
//---

app.get('/tasks', (req, res) => {
    if (!isAuthenticated(req)) {
        return res.status(401).send('user is not authenticated')
    }

    res.json(tasks)
});

app.post('/tasks', (req, res) => {
    if (!isAuthenticated(req)) {
        return res.status(401).send('user is not authenticated')
    }

    if (isTaskStructureCorrect(req, res)) {
        const { title, description, done, dueDate } = req.body

        const nextId = tasks.reduce((maxId, task) => Math.max(maxId, task.id), 0) + 1

        const newTask = { id: nextId, title, description, done, dueDate, createdAt: new Date() }
        tasks.push(newTask);
        res.status(201).send(`task ${title} created`)
    }
});

app.get('/tasks/:id', (req, res) => {
    if (!isAuthenticated(req)) {
        return res.status(401).send('user is not authenticated')
    }

    const task = tasks.find(t => t.id === parseInt(req.params.id))
    if (task) {
        res.json(task)
    } else {
        res.status(404).send('task not found')
    }
});

app.patch('/tasks/:id', (req, res) => {
    if (!isAuthenticated(req)) {
        return res.status(401).send('user is not authenticated')
    }

    let task = tasks.find(t => t.id === parseInt(req.params.id))
    if (!task) {
        return res.status(404).send('task not found')
    }

    //--- generated by ChatGPT
    const { title, description, done, dueDate } = req.body
    task.title = title || task.title
    task.description = description || task.description
    task.done = done !== undefined ? done : task.done
    task.dueDate = dueDate || task.dueDate
    res.json(task)
    //---
});

app.delete('/tasks/:id', (req, res) => {
    if (!isAuthenticated(req)) {
        return res.status(401).send('user is not authenticated')
    }

    const index = tasks.findIndex(t => t.id === parseInt(req.params.id))
    //--- generated by ChatGPT
    if (index === -1) {
        return res.status(404).send('task not found')
    }
    //---
    tasks.splice(index, 1)
    res.status(204).send()
});

app.post('/login', (req, res) => {
    const { user, password } = req.body
    if (user === USER && password === PASSWORD) {
        req.session.user = user
        req.session.isAuthenticated = true
        res.status(200).send('logged in successfully')
    } else {
        res.status(401).send('login failed')
    }
})

app.get('/verify', (req, res) => {
    if (!isAuthenticated(req)) {
        return res.status(401).send('user is not authenticated')
    }

    res.send('user is authenticated')
})

app.delete('/logout', (req, res) => {
    if (!isAuthenticated(req)) {
        return res.status(401).send('user is not authenticated')
    }

    req.session.destroy();
    res.send('logged out successfully')
});

function isTaskStructureCorrect(req, res) {
    const { title, description, done, dueDate } = req.body
    if (!title || !description || done === undefined || !dueDate) {
        res.status(422).send('task structure not right')
        return false
    }
    return true
}

function isAuthenticated(req) {
    return req.session.isAuthenticated
}

app.listen(port, () => console.log(`Listening on port ${port}`))